#use <conio>
#use <string>
#use <util>

bool all_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
{
  for (int i = 0; i < n - 1; i++)
     //@loop_invariant i >= 0 && (n == 0 || i < n);
    {
      if (string_compare(A[i], A[i + 1]) == 0) return false;
    }
  return true;
}

int count_distinct(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures \result <= n;
{
  int count = 0;
  for (int i = 0; i < n; i++)
     //@loop_invariant i >= 0 && i <= n;
  {
    if (i == n - 1 || string_compare(A[i], A[i + 1]) != 0) {
      count++;
    }
  }
  return count;
}

string[] remove_duplicates(string[] A, int n)
//@requires 0 <= n && n <= \length(A);
//@requires is_sorted(A, 0, n);
//@ensures is_sorted(\result, 0, \length(\result));
//@ensures all_distinct(\result, \length(\result));
//@ensures count_distinct(\result, \length(\result)) == \length(\result);
//@ensures count_distinct(\result, \length(\result)) == count_distinct(A, n);
//@ensures \length(\result) >= 0 && \length(\result) <= \length(A);
{
  int size = count_distinct(A, n);
  string[] distinctArray = alloc_array(string, size);
  int left = 0;

  for (int i = 0; i < n; i++)
    //@loop_invariant i >= 0 && i <= n;
    //@loop_invariant left >= 0 && left <= size;
    //@loop_invariant all_distinct(distinctArray, left);
    {
      if (i == n - 1 || string_compare(A[i], A[i + 1]) != 0)
      {
        distinctArray[left] = A[i];
        left++;
      }
   
    }

  //@assert left == size;

  return distinctArray;
}

bool permutations(string[] A, string[] B, int n)
//@requires \length(A) == n && \length(B) == n;
{
  //string[] vocab = alloc_array(string,  n);
  int curr = 0;
  int distinctSize = count_distinct(A, n);
  string[] vocab = remove_duplicates(A, distinctSize);
  int[] freq = alloc_array(int, distinctSize);


  for (int i = 0; i < n; i++)
    {
      string s = A[i];
      int index = binsearch(s, vocab, distinctSize);
      freq[index]++;
    }
  for (int i = 0; i < n; i++)
    {
      string s = B[i];
      int index = binsearch(s, vocab, distinctSize);
      if (index == -1) return false;
      freq[index]--;
    }

  for (int i = 0; i < distinctSize; i++)
    {
      if (freq[i] > 0) return false;
    }

  return true;
}

void testPermutations()
{
  
}

void testSort1()
{
  string[] A = alloc_array(string, 5);
  A[0] = "zack";
  A[1] = "betty";
  A[2] = "john";
  A[3] = "dylan";
  A[4] = "mike";

  string[] B = sortcopy(A, 0, 5);
  //@assert \length(B) == \length(A);
  assert(permutations(B, A, 5));
  
}

int main()
{
  testSort1();
  return 0;
}