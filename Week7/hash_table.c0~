#use <conio>
#use <util>

/**********************
 client side interface
 *********************/
typedef struct wcount* elem;
typedef string key;

int hash(key k);
bool key_equal(key k1, key k2);
key elem_key(elem e)
//@requires e != NULL;
  ;

/*********************************
 client side implementation
 ********************************/
struct wcount {
   string word;
   int count;
};

int hash(key s) {
    return hash_string(s);
}

bool key_equal(key s1, key s2) {
     return string_equal(s1, s2);
}

key elem_key(struct wcount* e) {
   return e-> word;
}

/************************
 library side interface
 ***********************/
// typedef ------ ht;

typedef struct ht_header* ht;

ht ht_new(int capacity)
//@requires capacity > 0;
;

elem ht_lookup(ht H, key k);
void ht_insert(ht H, elem e)
//@requires e != NULL;
;

int ht_size(ht H);
void ht_stats(ht h);
elem[] ht_tabulate(ht H);

/****************************
 library side implementation
 ***************************/
struct list_node {
   elem data;
   struct list_node* next;
};
typedef struct list_node list;

struct ht_header {
   int size;
   int capacity;
   list*[] table;
};

bool is_ht(ht H) {
   if (H == NULL) return false;
   if (!(H -> size >= 0)) return false;
   if (!(H -> capacity > 0)) return false;
   //@assert \length(H->table) == H->capacity;
   /* check that each element of table is valid chain */
   /* includes checking that all elements are non-null */
   return true;
}

ht ht_new(int capacity)
//@requires capacity > 0;
//@ensures is_ht(\result);
{
   ht H = alloc(struct ht_header);
   H->size = 0;
   H->capacity = capacity;
   H -> table = alloc_array(list*, capacity);
   /* every cell in H->table is initialized to null */
   return H;
}

elem ht_lookup(ht H, key k)
//@requires is_ht(H);
{
   int i = abs(hash(k) % H -> capacity);
   list* p = H->table[i];
   while (p != NULL)
   // loop_invariant: p points to a chain
   {
      //@assert p->data != NULL;
      if (key_equal(elem_key(p->data), k))
         return p->data;
      else
         p = p->next;
   }
   return NULL;
}

void ht_insert(ht H, elem e)
//@requires is_ht(H);
//@requires e != NULL;
//@ensures is_ht(H);
//@ensures ht_lookup(H, elem_key(e)) != NULL;
{
   key k = elem_key(e);
   int i = abs(hash(k) % H->capacity);

   list* p = H->table[i];
   while (p != NULL)
   //loop_invariant: p points to a chain (No null data)
   {
      if (key_equal(elem_key(p->data), k)) {
         p-> data = e;
	 return;
      } else {
         p = p->next;
      }
   }
   //@assert p == NULL;
   list* q = alloc(struct list_node);
   q->data = e;
   q->next = H->table[i];
   H->table[i] = q;
   (H->size)++;
   return;
}

int ht_size(ht H)
//@requires is_ht(H);
{
   return H->size;
}

elem[] ht_tabulate(ht H)
//@requires is_ht(H);
//@ensures \length(\result) == H->size;
{
   elem[] elems = alloc_array(elem, H->capacity);
   int i;
   int numAdded = 0;
   
   for (i = 0; i < H->capacity; i++)
   //@loop_invariant numAdded >= 0 && numAdded <= H->size;
   //@loop_invariant i >= 0 && i <= H->capacity;
   {
      list* p = H->table[i];
      while (p != NULL)
      {
         //@assert p->data != NULL;
	 //@assert numAdded >= 0 && numAdded < H->size;
	 elems[numAdded] = p-> data;
	 numAdded++;
      }
   }
   
   return elems;
}