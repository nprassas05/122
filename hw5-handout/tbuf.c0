/*
 * Text buffers
 * 
 * The back end for a one-character text editor, a doubly-linked list
 * whose elements are 16-character gap buffers.
 * 
 * 15-122 Principles of Imperative Computation */

/*** Interface ***/

typedef dll_pt tbuf;

bool is_tbuf(struct dll_pt_header* B);

bool tbuf_empty(tbuf B);    /* Checks if the text buffer is empty            */

tbuf tbuf_new();            /* Creates an empty text buffer, with            */
                            /*   gap buffers of size 16                      */
void tbuf_split_pt(tbuf B); /* Splits a full point into two nodes, so that   */
                            /*    the new point is not full                  */
void tbuf_forward(tbuf B);  /* Move the cursor forward 1 char, to the right  */
void tbuf_backward(tbuf B); /* Move the cursor backward 1 char, to the left  */
void tbuf_insert(tbuf B, char c); /* Insert the char c before the cursor     */
void tbuf_delete(tbuf B);         /* Delete the character before the cursor, */
                                  /*   also deletes the point if it is empty */

/*** Implementation ***/

bool all_valid_gapbufs(tbuf B)
{
  dll* temp = B->start->next;
  while (temp != B->end)
    {
      if (!is_gapbuf(temp->data)) return false;
      if (temp->data->limit != 16) return false;
      temp = temp->next;
    }
  return true;
}

bool aligned(tbuf B)
{
  dll* temp = B->start->next;

  /* loop through first portion before the point,
     making sure that these node's gap buffers
     are aligned right */
  while (temp != B->point)
    {
      if (!gapbuf_at_right(temp->data)) return false;
      temp = temp->next;
    }
  
  temp = temp->next;

  /* similarly, gap buffers to the right of point should all
     be left aligned */
  while (temp != B->end)
    {
      if (!gapbuf_at_left(temp->data)) return false;
      temp = temp->next;
    }
  return true;
}

bool correct_gapbuf_structure(tbuf B)
{
  /* if the point is the only node in the tbuf,
     then it's gap buffer can be either empty or non-empty */
  if (dll_pt_at_left(B) && dll_pt_at_right(B))
    return true;
  
  /* otherwise every gap buffer must be non-empty */
  dll* temp = B->start->next;
  while (temp != B->end)
    {
      if (gapbuf_empty(temp->data)) return false;
      temp = temp->next;
    }
  return true;
}

/* valid text buffers must be a valid doubly linked list, with
   each node being a valid gap buffer.  Each gap buffer should have
   a capacity of 16 chars, and they should also be aligned properly
   according to the location of the point.  There can either be
   one empty gap buffer or every node is non-empty */
bool is_tbuf(tbuf B)
{
  if (!is_dll_pt(B)) return false;
  if (!all_valid_gapbufs(B)) return false;
  if (!aligned(B)) return false;
  if (!correct_gapbuf_structure(B)) return false;

  return true;
}

/* Checks if the text buffer is empty */
/* Note: the precondition is_tbuf was removed
   because it caused conflicts when deleting text
   from the text buffer. When deleting text a text
   buffer can temporarily violate conditions of being
   a valid text buffer if a gap buffer is empty and it is
   not the only gap buffer in our data structure.  We
   check that the text buffer as a whole is not empty 
   before deleting an emtpy gap buffer. */
bool tbuf_empty(tbuf B)
{
  return dll_pt_at_left(B) && dll_pt_at_right(B) &&
    gapbuf_empty(B->point->data);
}

/* create empty text buffer with gap buffers
   of size 16 */
tbuf tbuf_new()
//@ensures is_tbuf(\result);
{
  tbuf B = alloc(struct dll_pt_header);
  B->start = alloc(struct dll_node);
  B->end = alloc(struct dll_node);
  B->point = alloc(struct dll_node);

  B->start->next = B->point;
  B->point->prev = B->start;
  B->point->next = B->end;
  B->end->prev = B->point;

  B->point->data = gapbuf_new(16);
  
  return B;
}

/* splits a full point into two nodes, so that
   the new point is not full */
void tbuf_split_pt(tbuf B)
//@requires is_tbuf(B);
//@requires gapbuf_full(B->point->data);
//@ensures is_tbuf(B);
{
  gapbuf G = B->point->data;
  gapbuf gapA = gapbuf_new(16);
  gapbuf gapB = gapbuf_new(16);

  for (int i = 0; i < 8; i++) {
    gapbuf_insert(gapA, G->buffer[i]);
    gapbuf_insert(gapB, G->buffer[i + 8]);
  }

  while (gapA->gap_start > G->gap_start)
    {
      gapbuf_backward(gapA);
    }
  while (gapB->gap_start > (G->gap_start - 8) &&
         !gapbuf_at_left(gapB))
    {
      gapbuf_backward(gapB);
    }

  /* add the two new gap buffers into the linked list,
     creating one new node for one of the new gap bufffers,
     and using the other new gap buffer to replace the current one
     being used by the point node */
  dll* nodeNew = alloc(struct dll_node);
  if (G->gap_start < 8)
    {
      B->point->data = gapA;
      nodeNew ->data = gapB;
      nodeNew->next = B->point->next;
      nodeNew->next->prev = nodeNew;
      nodeNew->prev = B->point;
      B->point->next = nodeNew;
    }
  else
  {
    B->point->data = gapB;
    nodeNew->data = gapA;
    nodeNew->next = B->point;
    nodeNew->prev = B->point->prev;
    nodeNew->prev->next = nodeNew;
    B->point->prev = nodeNew;
  }
}

/* move the cursor forward 1 char to the right */
void tbuf_forward(tbuf B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  if (dll_pt_at_right(B) && gapbuf_at_right(B->point->data))
    {
      return;
    }
  if (gapbuf_at_right(B->point->data))
    {
      dll_pt_forward(B);
    }
  
  gapbuf_forward(B->point->data);
}

/* move cursor backward one char to the left */
void tbuf_backward(tbuf B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  if (tbuf_empty(B))
    {
      return;
    }
  if (dll_pt_at_left(B) && gapbuf_at_left(B->point->data))
    {
      return;
    }
  
  if (gapbuf_at_left(B->point->data))
    {
      dll_pt_backward(B);
    }
  gapbuf_backward(B->point->data);
}

/* insert char c before the cursor */
void tbuf_insert(tbuf B, char c)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  if (gapbuf_full(B->point->data))
    {
      tbuf_split_pt(B);
    }
  gapbuf_insert(B->point->data, c);
}

/* delete char before the cursor and also
   delete point if it's emtpty */
void tbuf_delete(tbuf B)
//@requires is_tbuf(B);
//@ensures is_tbuf(B);
{
  if (tbuf_empty(B))
    {
      return;
    }
  if (dll_pt_at_left(B) && gapbuf_at_left(B->point->data))
    {
      return;
    }
  
  if (gapbuf_at_left(B->point->data))
    {
      dll_pt_backward(B);
    }
  
  gapbuf_delete(B->point->data);
  if (gapbuf_empty(B->point->data) && !tbuf_empty(B))
    {
      dll_pt_delete(B);
    }
}