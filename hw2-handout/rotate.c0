/* helper function used to non-destructively rotate a pixel array 
   by 90 degrees clockwise, returning the rotated array with the
   same size as the passed in array */
pixel[] rotate90Clockwise(pixel[] pixels, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires \length(pixels) == width * height;
//@requires width == height;
//@ensures \length(\result) == \length(pixels);
{
  int[] rotatedPixels = alloc_array(int, width * height);
  
  for (int i = 0; i < height; i++)
  //@loop_invariant i >= 0;
  {
    for (int j = 0; j < width; j++)
    //@loop_invariant j >= 0;
    {
      int index = get_index(i, j, width, height);
      int rIndex = get_index(width - 1 - j, i, width, height);
      //@assert index >= 0 && index < \length(pixels);
      //@assert rIndex >= 0 && rIndex < \length(pixels);
      rotatedPixels[index] = pixels[rIndex];
    }
  }

  return rotatedPixels;
}

/* fill the rotation array one quadrant at a time, rotating the rotateQuadrant
   array each time we move on to a new quadrant.  We will start in quadrant 2
   because the rotation array keeps the original pixels in quadrant 2.  Then
   we will work on qudrant 4, 3, and 1 in this order.  How the quadrants will
   be split up can be visualizing by the following:
   {1 2}
   {3 4}
*/
pixel[] rotate(pixel[] pixels, int width, int height)
//@requires is_valid_imagesize(width, height);
//@requires width == height;
//@requires \length(pixels) == width * height;
//@ensures \result != pixels && \length(\result) == \length(pixels) * 4;
{
  int n = width * 2; // new dimension of rotated image for an n * n image
  pixel[] rotationArray = alloc_array(int, n * n);

  /* keep an auxilary array with the same size as the original pixels array,
     used to rotate accordingly */
  pixel[] rotated = alloc_array(int, width * height);
  //@assert \length(rotated) == \length(pixels);

  int k = 0;
  /* fill qudrant 2 */
  for (int i = 0; i < n / 2; i++)
  {
    for (int j = n / 2; j < n; j++)
    //@loop_invariant k >= 0 && k <= \length(pixels);
    {
      int index = get_index(i, j, n, n);
      //@assert index >= 0 && index < \length(rotationArray);
      rotationArray[index] = pixels[k];
      k = k + 1;
    }
  }
  //@assert k == \length(pixels);

  /* fill quadrant 4 */
  k = 0;
  rotated = rotate90Clockwise(pixels, width, height);
  for (int i = n / 2; i < n; i++)
  {
    for (int j = n / 2; j < n; j++)
    //@loop_invariant k >= 0 && k <= \length(rotated);
    {
      int index = get_index(i, j, n, n);
      //@assert index >= 0 && index < \length(rotationArray);
      rotationArray[index] = rotated[k];
      k = k + 1;
    }
  }
  //@assert k == \length(pixels);

  /* fill quadrant 3 */
  k = 0;
  rotated = rotate90Clockwise(rotated, width, height);
  for (int i = n / 2; i < n; i++)
  {
    for (int j = 0; j < n / 2; j++)
    //@loop_invariant k >= 0 && k <= \length(rotated);
    {
      int index = get_index(i, j, n, n);
      //@assert index >= 0 && index < \length(rotationArray);
      rotationArray[index] = rotated[k];
      k = k + 1;
    }
  }
  //@assert k == \length(pixels);

  /* fill quadrant 1 */
  k = 0;
  rotated = rotate90Clockwise(rotated, width, height);
  for (int i = 0; i < n / 2; i++)
  {
    for (int j = 0; j < n / 2; j++)
    //@loop_invariant k >= 0 && k <= \length(rotated);
    {
      int index = get_index(i, j, n, n);
      //@assert index >= 0 && index < \length(rotationArray);
      rotationArray[index] = rotated[k];
      k = k + 1;
    }
  }
  
  //@assert k == \length(pixels);
  return rotationArray;   
}